/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package rappsilber.gui.components;

import java.awt.Desktop;
import java.awt.GraphicsEnvironment;
import rappsilber.config.AbstractRunConfig;
import rappsilber.config.LocalProperties;

import java.io.BufferedReader;
import java.io.DataOutputStream;
import java.io.IOException;
import java.io.InputStreamReader;
import java.net.HttpURLConnection;
import java.net.MalformedURLException;
import java.net.URI;
import java.net.URISyntaxException;
import java.net.URL;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import rappsilber.utils.Version;
import rappsilber.utils.XiVersion;

/**
 *
 * @author Lutz Fischer <lfischer@staffmail.ed.ac.uk>
 */
public class CallBackSettings extends javax.swing.JPanel {

    String m_userid;
    private String USER_AGENT = "XISEARCH_VERSION_CHECK 1.0";
    
    private String VersionURL = "https://rappsilberlab.org/software/xisearch/version.php";
    private String CheckVersionProperty = "xiSEARCH_CheckForNewVersion";
    private String ReportSearchProperty = "xiSEARCH_ReportSearch";
    private String UserIDProperty = "xiSEARCH_UserID";

    /**
     * Creates new form CallBackSettings
     */
    public CallBackSettings() {
        initComponents();
        String settingNV = LocalProperties.getProperty(CheckVersionProperty);
        ckCheckVersion.setSelected(AbstractRunConfig.getBoolean(settingNV, true));
        String setting = LocalProperties.getProperty(ReportSearchProperty);
        ckReportScale.setSelected(AbstractRunConfig.getBoolean(setting, true));
        m_userid = LocalProperties.getProperty(UserIDProperty);
        ckUserID.setSelected(m_userid != null);
        ckReportScale.setEnabled(ckCheckVersion.isSelected());
        ckUserID.setEnabled(ckCheckVersion.isSelected());
        if (settingNV != null && ckCheckVersion.isSelected()) {
            doCallBack(-1);
        }
        ckCheckVersionActionPerformed(null);
        ckReportScaleActionPerformed(null);
        ckUserIDActionPerformed(null);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        ckUserID = new javax.swing.JCheckBox();
        ckCheckVersion = new javax.swing.JCheckBox();
        ckReportScale = new javax.swing.JCheckBox();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();

        ckUserID.setText("Report (Randomized) UserID");
        ckUserID.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ckUserIDActionPerformed(evt);
            }
        });

        ckCheckVersion.setText("Check for new Version");
        ckCheckVersion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ckCheckVersionActionPerformed(evt);
            }
        });

        ckReportScale.setText("Report Search Scale");
        ckReportScale.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ckReportScaleActionPerformed(evt);
            }
        });

        jTextArea1.setColumns(20);
        jTextArea1.setLineWrap(true);
        jTextArea1.setRows(5);
        jTextArea1.setText("In order to secure funding for the devolpment of this software it is good if we can actually report on usage of it (e.g. how often, how and where).\nWhen you tick \"Check for new Version\" we will record the country assoyiated with your IP-address.\nIf you tick \"Report Search Scale\" then a scale of the search will be transmited (0: up to 20 proteins; 1: 20  to 100 Proteins 2: More then 100 Proteins)\nAddtionally a randomized (non-personalised) USER ID can be transmited to track how many unique users we have.\n");
        jTextArea1.setWrapStyleWord(true);
        jScrollPane1.setViewportView(jTextArea1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addComponent(ckUserID)
                    .addComponent(ckCheckVersion)
                    .addComponent(ckReportScale))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(ckCheckVersion)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(ckReportScale)
                .addGap(5, 5, 5)
                .addComponent(ckUserID)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void ckReportScaleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ckReportScaleActionPerformed

        LocalProperties.setProperty(ReportSearchProperty, ckReportScale.isSelected() ? "1" : "0");

    }//GEN-LAST:event_ckReportScaleActionPerformed

    private void ckCheckVersionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ckCheckVersionActionPerformed
        Object ret = LocalProperties.setProperty(CheckVersionProperty, ckCheckVersion.isSelected() ? "1" : "0");
        ckReportScale.setEnabled(ckCheckVersion.isSelected());
        ckUserID.setEnabled(ckCheckVersion.isSelected());

    }//GEN-LAST:event_ckCheckVersionActionPerformed

    private void ckUserIDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ckUserIDActionPerformed
        if (m_userid == null)
            m_userid = java.util.UUID.randomUUID().toString();

        LocalProperties.setProperty(UserIDProperty, ckUserID.isSelected() ? m_userid : null);
    }//GEN-LAST:event_ckUserIDActionPerformed

    public void doCallBack(final int numberProteins) {
        Runnable runnable = new Runnable() {
            public void run() {
                try {
                    if (ckCheckVersion.isSelected()) {
                        String surl = VersionURL + "?";
                        if (numberProteins > 0) {
                            surl += "searching&";
                            if (ckReportScale.isSelected()) {
                                if (numberProteins < 20) {
                                    surl += "scale=0&";
                                } else if (numberProteins < 100) {
                                    surl += "scale=1&";
                                } else {
                                    surl += "scale=2&";
                                }
                            }
                        }
                        if (ckUserID.isSelected()) {
                            surl += "user=" + m_userid;
                        }
                        
                        URL url = new URL(surl);
                        Logger.getLogger(CallBackSettings.class.getName()).log(Level.INFO, "Checking for new Version with: " +surl );
                        BufferedReader in = new BufferedReader(new InputStreamReader(url.openStream()));
                        String inputLine;
                        StringBuffer response = new StringBuffer();
                        inputLine = in.readLine();
                        in.close();
                        if (inputLine != null) {
                            Version onlineVersion = new Version(inputLine);
                            if (onlineVersion.compareTo(XiVersion.version) > 0) {
                                Logger.getLogger(CallBackSettings.class.getName()).log(Level.WARNING, "New Version Available: " + onlineVersion);
                                if ((!java.awt.GraphicsEnvironment.isHeadless())
                                        && Desktop.isDesktopSupported()
                                        && Desktop.getDesktop().isSupported(Desktop.Action.BROWSE)) {
                                    if (JOptionPane.showConfirmDialog(CallBackSettings.this,
                                            "New Version of xiSEARCH is available", "New Version",
                                            JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION) {
                                        try {
                                            Desktop.getDesktop().browse(new URI("https://rappsilberlab.org/software/xisearch/"));
                                        } catch (URISyntaxException ex) {
                                            Logger.getLogger(CallBackSettings.class.getName()).log(Level.WARNING, "Could not open web-browser!", ex);
                                        }
                                    }
                                }
                            }
                        }
                    }
                } catch (IOException ex) {
                    Logger.getLogger(CallBackSettings.class.getName()).log(Level.WARNING, "Error during version check", ex);
                }
            }
        };
        
        Thread vc = new Thread(runnable);
        vc.setName("VersionCheck");
        vc.setDaemon(true);
        vc.start();
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox ckCheckVersion;
    private javax.swing.JCheckBox ckReportScale;
    private javax.swing.JCheckBox ckUserID;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea jTextArea1;
    // End of variables declaration//GEN-END:variables
}
